// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protobuffer for the generalized enriched cardinality sketch.
// SketchConfig is configuration of the sketch.
// Sketch is the sketch itself.

syntax = "proto3";

package wfa.any_sketch;

option java_package = "org.wfanet.anysketch";
option java_multiple_files = true;
option java_outer_classname = "SketchProto";

// Truncated discretized exponential distrbution.
// https://en.wikipedia.org/wiki/Exponential_distribution
message ExponentialDistribution {
  // Probability of i-th element is proportional to
  // exp(-rate / max_value * i).
  double rate = 1;
  int64 num_values = 2;
  // Salt used to generate fingerprint. Optional.
  string salt = 3;
}

// Integer geometric distribution truncated to 0, ..., num_values - 1.
// https://en.wikipedia.org/wiki/Geometric_distribution
message GeometricDistribution {
  // Probability of i-th element is equal to
  // (1 - success_probability) ^ k.
  // Except for the last element, which gets the remaining probability.
  double success_probability = 1;
  int64 num_values = 2;
  // Salt used to generate fingerprint. Optional.
  string salt = 3;
}

// Integer uniform distribution from 0 to num_values - 1.
// Mathematically it is an exponential distribution with rate 0.
// Providing a direct way to specify it for convenience.
// https://en.wikipedia.org/wiki/Discrete_uniform_distribution
message UniformDistribution {
  // Max value. Full int64 random if unspecified.
  int64 num_values = 1;
  // Salt used to generate fingerprint. Optional.
  string salt = 2;
}

// Degenerate constant distribution.
// https://en.wikipedia.org/wiki/Degenerate_distribution
message ConstantDistribution {
  // Value of the constant distribution.
  int64 value = 1;
}

// Dirac Mixture distribution.
// TODO(evgenys): Add .md documentation.
// See https://research.google/pubs/pub48387/
message DiracMixtureDistribution {
  // DiracDelta corresponds to a pool of num_values * alpha indexes.
  // Probability of allocation into the pool is equal to alpha * activity.
  // Probability within the pool is uniform.
  // DiracDeltas as allocated on the integer line sequentially.
  // I.e. the first  one uses index values from 0 to num_values * alpha_1 - 1,
  // the second from num_values * alpha_1 to
  // num_values * (alpha_1 + alpha_2) - 1 etc.
  message DiracDelta {
    double alpha = 1;
    double activity = 2;
  }
  repeated DiracDelta deltas = 1;
  int64 num_values = 2;
}

// Brute-force specification of a discrete probability distribution.
// Probability of index equal to i is equal to index_probability[i].
message VerbatimDistribution {
  repeated double index_probability = 1;
}

// Represents a value coming from the user. E.g. frequency, demo.
// TODO(evgenys): Add link to public design doc for oracle distribution.
message OracleDistribution {
  // Key used to extract the value from context.
  string key = 1;
}

// Random distribution.
message Distribution {
  oneof distribution_choice {
    ExponentialDistribution exponential = 1;
    UniformDistribution uniform = 2;
    GeometricDistribution geometric = 3;
    ConstantDistribution constant = 4;
    DiracMixtureDistribution dirac_mixture = 5;
    VerbatimDistribution verbatim = 6;
    OracleDistribution oracle = 15;
  }
}

// Enriched cardinality sketch config.
message SketchConfig {
  // The sketch may be GENERIC or using a specific optimized implementation.
  enum SketchType { GENERIC = 0; }
  // Index specification.
  // Indexes are unsigned integers.
  message IndexSpec {
    // Name of the index. Truly optional.
    string name = 1;
    // Distribution of the index.
    Distribution distribution = 2;
  }

  // Value specification.
  // Values are unsigned integers.
  message ValueSpec {
    // Aggregation function specification.
    // Any function here should be computable homomorphically.
    enum Aggregator {
      // This should never be encountered.
      AGGREGATOR_UNSPECIFIED = 0;
      // Sums the values.
      SUM = 1;
      // Stores a value if only that value is seen.
      // If more than one distinct value occurred then result is -1.
      // Negative values are never valid values.
      // Only values less than 2^32 are valid for UNIQUE aggregator, as
      // In the encrypted protocol this corresponds to random value stored
      // if more than one value occurred. Negatives and values above 2^32 are
      // replaced with -1.
      // Probability of a random value treated as valid is 2^-32 ~ 1/1B.
      // TODO(evgenys): Move design to .md file.
      // See Section 6.1 in https://research.google/pubs/pub49177/
      UNIQUE = 2;
    }
    // Name of the value.
    string name = 1;
    // Distribution of the value. It is often constant or oracle.
    Distribution distribution = 2;
    // How to aggregate the value.
    Aggregator aggregator = 3;
  }
  // Type of the sketch. You can always use GENERIC if highly tuned performance
  // is not required.
  SketchType sketch_type = 1;
  // NOTE: In configs singular fields look better, but as we are going to
  // opensource the code we should probably follow the guidelines on
  // plural names for repeated fields.
  // How to generate each index?
  repeated IndexSpec indexes = 2;
  // How to generate each value?
  repeated ValueSpec values = 3;

  // See b/152452184 for how to extend the sketch to reservoir sampling when
  // running in the clear.
}

// Generalized enriched cardinality sketch.
// To add an item to the sketch:
// Convert an item to a register.
// Try to find register with the same index.
// If found:
//   aggregate the values in the sketch register with the sketch of the item
// otherwise:
//   insert a new register.
// Sketch is inherently sparse, as this allows usage of UNIQUE
// aggregation in SMPC.
message Sketch {
  // Enriched cardinality sketch register.
  message Register {
    // Linearized register index. E.g. LiquidLegion bucket.
    int64 index = 1;
    // Values of the register. E.g. LiquidLegion frequency.
    repeated int64 values = 2;
  }
  // Config can be provided explicitly, or determined from context.
  SketchConfig config = 1;
  // Registers of the sketch.
  repeated Register registers = 2;
}
