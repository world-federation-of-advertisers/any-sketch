package(default_visibility = ["//visibility:public"])

_INCLUDE_PREFIX = "/src/main/cc/"

cc_library(
    name = "sketch_encrypter",
    srcs = ["sketch_encrypter.cc"],
    hdrs = ["sketch_encrypter.h"],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        "//src/main/cc/math:distributions",
        "//src/main/cc/math:noise_parameters_computation",
        "//src/main/proto/wfa/any_sketch:sketch_cc_proto",
        "//src/main/proto/wfa/any_sketch/crypto:el_gamal_key_cc_proto",
        "//src/main/proto/wfa/any_sketch/crypto:sketch_encryption_methods_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/types:span",
        "@com_google_private_join_and_compute//private_join_and_compute/crypto:commutative_elgamal",
        "@wfa_common_cpp//src/main/cc/common_cpp/macros",
    ],
)

cc_library(
    name = "sketch_encrypter_adapter",
    srcs = [":sketch_encrypter_adapter.cc"],
    hdrs = [":sketch_encrypter_adapter.h"],
    strip_include_prefix = _INCLUDE_PREFIX,
    deps = [
        ":sketch_encrypter",
        "//src/main/proto/wfa/any_sketch/crypto:sketch_encryption_methods_cc_proto",
    ],
)

cc_binary(
    name = "combine_public_keys",
    srcs = ["key_combiner_main.cc"],
    deps = [
        ":sketch_encrypter",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
    ],
)
