// Copyright 2022 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "expint.h"

#include "include/gtest/gtest.h"

namespace llvm {

namespace {

TEST(Expint, PositiveInputsGetCorrectResult) {
  EXPECT_NEAR(expint(1.0 / 1024),
              -6.35327933972759151358547423727042905862963067106751711596065L,
              1e-10);
  EXPECT_NEAR(expint(0.1),
              -1.6228128139692766749656829992274752542233716176724L, 1e-10);
  EXPECT_NEAR(expint(0.125),
              -1.37320852494298333781545045921206470808223543321810480716122L,
              1e-10);
  EXPECT_NEAR(expint(0.5),
              0.454219904863173579920523812662802365281405554352642045162818L,
              1e-10);
  EXPECT_NEAR(expint(1),
              1.89511781635593675546652093433163426901706058173270759164623L,
              1e-10);
  EXPECT_NEAR(expint(50.5),
              1.72763195602911805201155668940185673806099654090456049881069e20L,
              1e5L);
}

TEST(Expint, NegativeInputsGetCorrectResult) {
  EXPECT_NEAR(expint(-1.0 / 1024),
              -6.35523246483107180261445551935803221293763008553775821607264L,
              1e-10);
  EXPECT_NEAR(expint(-0.1),
              -1.8229239584193906660809136582918309391190330416544L, 1e-10);
  EXPECT_NEAR(expint(-0.125),
              -1.62342564058416879145630692462440887363310605737209536579267L,
              1e-10);
  EXPECT_NEAR(expint(-0.5),
              -0.559773594776160811746795939315085235226846890316353515248293L,
              1e-10);
  EXPECT_NEAR(expint(-1),
              -0.219383934395520273677163775460121649031047293406908207577979L,
              1e-10);
  EXPECT_NEAR(
      expint(-50.5),
      -2.27237132932219350440719707268817831250090574830769670186618e-24L,
      1e-30);
}

TEST(Expintf, PositiveInputsGetCorrectResult) {
  EXPECT_NEAR(expintf(1.0 / 1024),
              -6.35327933972759151358547423727042905862963067106751711596065L,
              0.0001);
  EXPECT_NEAR(expintf(0.1),
              -1.6228128139692766749656829992274752542233716176724L, 0.0001);
  EXPECT_NEAR(expintf(0.125),
              -1.37320852494298333781545045921206470808223543321810480716122L,
              0.0001);
  EXPECT_NEAR(expintf(0.5),
              0.454219904863173579920523812662802365281405554352642045162818L,
              0.0001);
  EXPECT_NEAR(expintf(1),
              1.89511781635593675546652093433163426901706058173270759164623L,
              0.0001);
  EXPECT_NEAR(expintf(50.5),
              1.72763195602911805201155668940185673806099654090456049881069e20L,
              1e15L);
}

TEST(Expintf, NegativeInputsGetCorrectResult) {
  EXPECT_NEAR(expintf(-1.0 / 1024),
              -6.35523246483107180261445551935803221293763008553775821607264L,
              0.0001);
  EXPECT_NEAR(expintf(-0.1),
              -1.8229239584193906660809136582918309391190330416544L, 0.0001);
  EXPECT_NEAR(expintf(-0.125),
              -1.62342564058416879145630692462440887363310605737209536579267L,
              0.0001);
  EXPECT_NEAR(expintf(-0.5),
              -0.559773594776160811746795939315085235226846890316353515248293L,
              0.0001);
  EXPECT_NEAR(expintf(-1),
              -0.219383934395520273677163775460121649031047293406908207577979L,
              0.0001);
  EXPECT_NEAR(
      expintf(-50.5),
      -2.27237132932219350440719707268817831250090574830769670186618e-24L,
      1e-30);
}

TEST(Expintl, PositiveInputsGetCorrectResult) {
  EXPECT_NEAR(expintl(1.0 / 1024),
              -6.35327933972759151358547423727042905862963067106751711596065L,
              1e-10);
  EXPECT_NEAR(expintl(0.1),
              -1.6228128139692766749656829992274752542233716176724L, 1e-10);
  EXPECT_NEAR(expintl(0.125),
              -1.37320852494298333781545045921206470808223543321810480716122L,
              1e-10);
  EXPECT_NEAR(expintl(0.5),
              0.454219904863173579920523812662802365281405554352642045162818L,
              1e-10);
  EXPECT_NEAR(expintl(1),
              1.89511781635593675546652093433163426901706058173270759164623L,
              1e-10);
  EXPECT_NEAR(expintl(50.5),
              1.72763195602911805201155668940185673806099654090456049881069e20L,
              1e5L);
}

TEST(Expintl, NegativeInputsGetCorrectResult) {
  EXPECT_NEAR(expintl(-1.0 / 1024),
              -6.35523246483107180261445551935803221293763008553775821607264L,
              1e-10);
  EXPECT_NEAR(expintl(-0.1),
              -1.8229239584193906660809136582918309391190330416544L, 1e-10);
  EXPECT_NEAR(expintl(-0.125),
              -1.62342564058416879145630692462440887363310605737209536579267L,
              1e-10);
  EXPECT_NEAR(expintl(-0.5),
              -0.559773594776160811746795939315085235226846890316353515248293L,
              1e-10);
  EXPECT_NEAR(expintl(-1),
              -0.219383934395520273677163775460121649031047293406908207577979L,
              1e-10);
  EXPECT_NEAR(
      expintl(-50.5),
      -2.27237132932219350440719707268817831250090574830769670186618e-24L,
      1e-30);
}

}  // namespace
}  // namespace llvm
